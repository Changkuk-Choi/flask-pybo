set FLASK_APP=pybo
set FLASK_DEBUG=true
flask run

http://localhost:5000/question/list/
http://localhost:5000/question/detail/2/


[중요]!! flask run 명령은 반드시 프로젝트 홈 디렉터리(C:/projects/myproject)에서 실행해야한다.
 다른 곳에서 실행하면 실행은 되지만 정상으로 동작하지 않는다.
 앞으로도 flask run으로 플라스크 서버를 실행할 때는 위치를 꼭 확인하자.

우리는 플라스크 기본 앱을 FLASK_APP=pybo로 설정했다.
 따라서 이전에 pybo는 프로젝트 루트에 있는 pybo.py 파일을 가리켰지만,
 이번에는 pybo 모듈 즉 pybo/__init__.py 파일을 가리킨다.
 pybo.py 와 pybo/__init__.py는 동일한 pybo 모듈이다.
따라서 pybo.py 파일을 pybo/__init__.py 파일로 바꾸어도 오류없이 잘 동작한다.

conda install flask
conda install flask-migrate -- 할팔요 없음???
StockWebFlask
  ├── migrations/  flask db init 데이터베이스를 초기화 명령에 의해 생성됨
  ├── pybo/
  │      ├─ __init__.py
  │      ├─ models.py
  │      ├─ forms.py
  │      ├─ views/
  │      │   └─ main_views.py
  │      ├─ static/
  │      │   └─ style.css
  │      └─ templates/
  │            └─ index.html
  └── config.py

(env_flask) C:\Users\USER\PycharmProjects\StockWebFlask>flask db init  -- DB 초기화


https://sqlitebrowser.org/dl 에 접속한 다음
DB Browser for SQLite(이하 DB 브라우저) 설치 파일(standard installer)을
내려받아 설치를 진행하자.

플라스크 셸은 플라스크를 실행하는 데 필요한 환경이 자동으로 설정되어 실행되므로 일반 파이썬 셸과는 다르다

redirect(URL) - URL로 페이지를 이동
url_for(라우팅 함수명) - 라우팅 함수에 매핑되어 있는 URL을 리턴
url_for 함수에 전달된 question._list는 question, _list 순서로 해석되어 라우팅 함수를 찾는다.
 question은 등록된 블루프린트 별칭, _list는 블루프린트에 등록된 함수명이다.
 따라서 question._list는 question이라는 별칭으로 등록한 question_views.py 파일의 _list 함수를 의미한다.
 그리고 _list 함수에 등록된 URL 매핑 규칙은 @bp.route('/list/')이므로 url_for('question._list')는
 bp의 프리픽스 URL인 /question/과 /list/가 더해진 /question/list/ URL을 반환한다.
앞에서는 url_for가 라우팅 함수의 URL을 찾아준다고 했지만 정적 파일의 URL도 찾아준다.



기존 코드에서 답변을 확인할 수 있는 영역을 추가했다. {{ question.answer_set|length }} 코드는 답변 개수를 의미한다.
 length는 템플릿 필터인데 객체의 길이를 반환해 준다.
 이처럼 템플릿 필터는 | 문자 뒤에 추가해서 사용한다.


웹 페이지에 디자인을 적용하려면 CSS를 사용해야 한다.
 CSS를 파이보에 적용하려면 CSS 파일이 pybo/static 디렉터리에 있어야 한다.
 이때 CSS 파일은 플라스크에서 정적(static) 파일로 분류한다.
 정적 파일은 주로 이미지(.png, .jpg)나 자바스크립트(.js), 스타일시트(.css)와 같은 파일을 의미한다.

부트스트랩 다운로드 - https://getbootstrap.com/docs/5.1/getting-started/download/
부트스트랩은 3.x, 4.x, 5.x 등의 버전이 존재하고 메이저 번호(3, 4, 5)에 따라 그 사용방법이 다르다.
 이 책은 부트스트랩 버전 5 기준으로 실습을 진행한다.


 form 태그에 action 속성을 지정하지 않으면 현재 페이지의 URL이 디폴트 action으로 설정된다.


from pybo import db 어제든지 이런식으로 경로를 쓰고 임포트 하면되나요?
pybo는 폴더가 맞습니다. 지금 잘 이해 안되시는 부분이 파이썬 패키지인것 같네요. 파이썬 패키지는 다음 설명도 참고 해 보세요.
https://wikidocs.net/1418 -  박응용님,  2021년 7월 11일 11:08 오후 추천 , 대댓글
from pybo import db 에서 db는 __init__.py 에 선언된 db를 의미합니다.

Form 추가
1. 폼 추가하기 - 파일명: projects/myproject/pybo/forms.py  에 추가
2. 답변 등록 라우팅 함수 수정하기 - answer_views.py
3. CSRF 코드와 오류 표시 기능 추가하기
4. 질문 상세 템플릿에 폼이 추가


{{ question.create_date|datetime }}과 같이 파이프라인 문자와 함께 datetime 필터를 적용했다.
 datetime 필터가 적용되었으므로 format_datetime 필터 함수가 실행된다.
 이때 format_datetime의 매개변수 value에 question.create_date가 전달된다.


 여기서는 @bp.before_app_request 애너테이션을 사용했다.
  이 애너테이션이 적용된 함수는 라우팅 함수보다 항상 먼저 실행된다.
  즉, 앞으로 load_logged_in_user 함수는 모든 라우팅 함수보다 먼저 실행될 것이다.
load_logged_in_user 함수에서 사용한 g는 플라스크의 컨텍스트 변수이다.
 이 변수는 request 변수와 마찬가지로 [요청 → 응답] 과정에서 유효하다.


코드에서 보듯 데코레이터 함수는 기존 함수를 감싸는 방법으로 간단히 만들 수 있다
@login_required 데코레이터는 반드시 함수명 바로 위에 위치해야 한다.
 @login_required 데코레이터가 @bp.route 데코레이터보다 위에 위치할 경우 정상동작하지 않는다.


flask run

set FLASK_APP=pybo
set FLASK_DEBUG=true

migrations/  flask db init 데이터베이스를 초기화 명령에 의해 생성됨
flask db migrate
flask db upgrade



sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such table: question_voter
[SQL:
SELECT user.id AS user_id,
       user.username AS user_username,
       user.password AS user_password,
       user.email AS user_email
FROM user, question_voter
WHERE ? = question_voter.question_id
AND user.id = question_voter.user_id
]
[parameters: (2,)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)


kw는 POST 방식으로 전달하면서 page는 GET 방식으로 전달하는 방법은 없다.


깃 설치하기
git-scm.com


깃으로 관리하지 않을 파일 무시하기 - .gitignore
앞에서 조언한 대로 git add 명령을 수행하기 전에 깃으로 관리할 파일을 고민해야 한다. 예를 들어 파이보를 만들며 직접 작성한 config.py, pybo 디렉터리 등은 깃으로 관리해야 할 대상이 맞지만 .idea나 pybo.db는 사용자별, 시스템별로 달라지는 파일이므로 깃으로 관리하면 안 된다.

.idea는 사용자 설정을 저장하는 파이참 전용파일이고, pybo.db 파일은 SQLite의 데이터베이스 파일이다.



깃이 저장소에 변경 사항을 저장할 때는 스테이징을 거친다
깃은 저장소에 변경 사항을 바로 저장하지 않고 스테이징(staging)이라는 단계를 거친다. 스테이징은 변경 사항 중에서 저장하고 싶은 부분만 선택해서 저장소에 저장하기 직전 단계에 올려놓는 개념이다. 따라서 git add <파일명> 명령을 사용하면 git add 명령으로 지정한 파일이 스테이지 영역에 추가되고, 이후 git commit 명령을 수행해야 비로소 스테이지 영역에 있는 파일이 저장소에 저장된다.

하지만 git diff를 수행할 때 한글 부분이 모두 깨져 보이는 문제가 발생한다. 이 문제를 해결하려면 다음처럼 set LC_ALL=C.UTF-8 명령을 수행해 주어야 한다.



C:\projects\myproject> ==> C:\Users\USER\PycharmProjects\StockWebFlask
